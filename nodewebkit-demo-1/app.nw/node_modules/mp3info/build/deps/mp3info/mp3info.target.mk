# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := mp3info
DEFS_Debug := \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DDEBUG' \
	'-D_DEBUG'

# Flags passed to all source files.
CFLAGS_Debug := \
	-fPIC \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-pthread \
	-m64 \
	-g \
	-O0

# Flags passed to only C files.
CFLAGS_C_Debug :=

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-fno-rtti \
	-fno-exceptions

INCS_Debug := \
	-I/home/paul/.node-gyp/0.10.21/src \
	-I/home/paul/.node-gyp/0.10.21/deps/uv/include \
	-I/home/paul/.node-gyp/0.10.21/deps/v8/include \
	-I$(srcdir)/deps/mp3info/src

DEFS_Release := \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DNDEBUG'

# Flags passed to all source files.
CFLAGS_Release := \
	-fPIC \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-pthread \
	-m64 \
	-O2 \
	-fno-strict-aliasing \
	-fno-tree-vrp

# Flags passed to only C files.
CFLAGS_C_Release :=

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-fno-rtti \
	-fno-exceptions

INCS_Release := \
	-I/home/paul/.node-gyp/0.10.21/src \
	-I/home/paul/.node-gyp/0.10.21/deps/uv/include \
	-I/home/paul/.node-gyp/0.10.21/deps/v8/include \
	-I$(srcdir)/deps/mp3info/src

OBJS := \
	$(obj).target/$(TARGET)/deps/mp3info/src/mp3tech.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Debug := \
	-pthread \
	-rdynamic \
	-m64

LDFLAGS_Release := \
	-pthread \
	-rdynamic \
	-m64

LIBS :=

$(obj).target/deps/mp3info/libmp3info.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(obj).target/deps/mp3info/libmp3info.a: LIBS := $(LIBS)
$(obj).target/deps/mp3info/libmp3info.a: TOOLSET := $(TOOLSET)
$(obj).target/deps/mp3info/libmp3info.a: $(OBJS) FORCE_DO_CMD
	$(call do_cmd,alink)

all_deps += $(obj).target/deps/mp3info/libmp3info.a
# Add target alias
.PHONY: mp3info
mp3info: $(obj).target/deps/mp3info/libmp3info.a

# Add target alias to "all" target.
.PHONY: all
all: mp3info

# Add target alias
.PHONY: mp3info
mp3info: $(builddir)/libmp3info.a

# Copy this to the static library output path.
$(builddir)/libmp3info.a: TOOLSET := $(TOOLSET)
$(builddir)/libmp3info.a: $(obj).target/deps/mp3info/libmp3info.a FORCE_DO_CMD
	$(call do_cmd,copy)

all_deps += $(builddir)/libmp3info.a
# Short alias for building this static library.
.PHONY: libmp3info.a
libmp3info.a: $(obj).target/deps/mp3info/libmp3info.a $(builddir)/libmp3info.a

# Add static library to "all" target.
.PHONY: all
all: $(builddir)/libmp3info.a

