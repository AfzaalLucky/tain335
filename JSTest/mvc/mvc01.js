// Generated by CoffeeScript 1.6.3
(function() {
  var Animal, Cat, Class, Person, cat, person;

  Class = function(parent) {
    var klass, subclass;
    klass = function() {
      /*
      		为了将参数原原本本地传给方法
      */

      return this.init.apply(this, arguments);
    };
    /*
    	为了清空对象属性
    */

    if (parent) {
      subclass = function() {};
      subclass.prototype = parent.prototype;
      klass.prototype = new subclass;
    }
    /*
    	默认是空的init函数
    */

    klass.prototype.init = function() {};
    klass.prototype.parent = klass;
    klass.extend = function(obj) {
      var extended, key, val;
      extended = obj.extended;
      for (key in obj) {
        val = obj[key];
        klass[key] = val;
      }
      if (extended) {
        return extended(klass);
      }
    };
    klass.include = function(obj) {
      var included, key, val;
      included = obj.included;
      for (key in obj) {
        val = obj[key];
        klass.prototype[key] = val;
      }
      if (included) {
        return included(klass);
      }
    };
    klass.proxy = function(func) {
      var _this = this;
      return function() {
        return func.apply(_this, arguments);
      };
    };
    klass.prototype.proxy = klass.proxy;
    return klass;
  };

  Person = new Class;

  Person.prototype.init = function() {
    return console.log("do something");
  };

  Person.include({
    save: function() {
      return console.log("save a new record");
    },
    included: function(x) {
      return console.log(x, "was included");
    }
  });

  person = new Person;

  person.save();

  /*
  静态方法(不推荐)
  */


  /*
  实例方法(不推荐)
  */


  Animal = new Class;

  Animal.include({
    breath: function() {
      return console.log('breath');
    }
  });

  Cat = new Class(Animal);

  cat = new Cat;

  cat.breath();

}).call(this);
